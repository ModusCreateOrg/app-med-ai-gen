---
description: 
globs: 
alwaysApply: true
---
- Project Proposal Overview: This project proposes an AI-powered medical report translator that simplifies complex medical documents for patients and caregivers. By leveraging AI-driven text extraction and natural language processing (NLP), the system translates medical jargon into plain language, helping users understand their health conditions, diagnoses, and test results without relying on unreliable online searches.

- Why are we doing this? Patients often receive medical reports full of complex terminology, abbreviations, and technical language that they don’t understand, causing confusion, stress, and potential misinterpretation of their health conditions. Many resort to Google searches or unreliable forums to decipher their reports, leading to misinformation and anxiety. By automating medical report simplification, we help patients take control of their healthcare, make informed decisions, and reduce the dependency on doctors for basic explanations.

Features:
Authentication
The platform shall allow new users to register, creating a platform account to which all of their uploaded content and reports will be associated.
The platform shall allow existing users to authenticate using (credentials, Google?, other?), so that they may upload new files or access previously uploaded files.

Upload Medical Reports
The platform shall allow users to upload PDF medical documents for analysis.
The platform shall allow users to upload images of medical documents for analysis.
The platform shall allow users to use the device camera to capture and upload images of medical documents for analysis.

Process Medical Reports
The platform shall extract text from uploaded files.
The platform shall partition the text of a file into manageable chunks, e.g. paragraphs.
The platform shall use AI to generate simplified explanations of the chunks of text. 
The platform shall display an alert if the contents of the uploaded files indicate the user should seek assistance from a medical professional.
The platform shall store all uploaded files and the generated insights derived from them so that the user may review the information at a later date.

Provide Medical References
The platform shall provide relevant references to trusted medical sources of information so that users may read more about the topics related to uploaded files.

Conversational AI
The platform shall allow users to ask follow up questions regarding their uploaded files.

Responsive
The solution supports native mobile devices only; no browser support is required.  The solution is designed for both phone and tablet viewport sizes.

Accessibility
The application should be constructed with accessibility best practices; however, the client is not seeking to meet any specific accessibility level.

Testing
Unit
All components will have a base suite of unit tests and the application must have a minimum of 60% code coverage. 


Technologies:
 - Ionic + React - Cross-platform user interface core
 - Axios - HTTP client
 - TanStack Query - Asynchronous state management, caching, and data fetching
 - Remark Markdown - Markdown renderer
 - Tailwind
 - Vitest - Core test framework
 - React Testing Library - User-centric approach for UI component tests
 - Mock Service Worker - API mocking
 - Perplexity API
 - Amazon Bedrock

 For visual context, you can use this images:

[1 - Home copy.png](mdc:docs/assets/images/1 - Home copy.png)
[1 - Home_avatar.png](mdc:docs/assets/images/1 - Home_avatar.png)
[1a - Home_NoReports.png](mdc:docs/assets/images/1a - Home_NoReports.png)
[1b - Home_NoLoad.png](mdc:docs/assets/images/1b - Home_NoLoad.png)
[2 - upload1.png](mdc:docs/assets/images/2 - upload1.png)
[2 - upload1_url.png](mdc:docs/assets/images/2 - upload1_url.png)
[3 - upload2.png](mdc:docs/assets/images/3 - upload2.png)
[3 - upload2_url.png](mdc:docs/assets/images/3 - upload2_url.png)
[4 - processing.png](mdc:docs/assets/images/4 - processing.png)
[5 - Results analysis.png](mdc:docs/assets/images/5 - Results analysis.png)
[6 - Results Archive.png](mdc:docs/assets/images/6 - Results Archive.png)
[7 - Detail.png](mdc:docs/assets/images/7 - Detail.png)
[Upload_default.png](mdc:docs/assets/images/Upload_default.png)
[Upload_success.png](mdc:docs/assets/images/Upload_success.png)
[Uploading.png](mdc:docs/assets/images/Uploading.png)
[Uploading_complete.png](mdc:docs/assets/images/Uploading_complete.png)
 
AWS architecture: [aws architecture.pdf](mdc:docs/assets/aws architecture.pdf)

# CSS Units Standards

## Relative Units Requirement

- **ALWAYS use relative units** instead of absolute pixel values (px) in CSS/SCSS
- **Preferred relative units**:
  - `rem` for most measurements (margins, paddings, font sizes)
  - `em` for spacing related to the current element's font size
  - `%` for responsive layouts and containers
  - `vh/vw` for viewport-relative sizing
  - `ch` for width measurements related to character width

## Conversion Reference

- `1rem` = base font size (typically 16px)
- To convert px to rem: `[px value] / 16 = [rem value]`
  - Example: `16px` = `1rem`, `24px` = `1.5rem`, `8px` = `0.5rem`

## Why Relative Units?

- **Accessibility**: Scales with user font size preferences
- **Responsiveness**: Adapts to different viewport sizes
- **Maintainability**: Easier to scale entire UI by changing root font size
- **Consistency**: Creates a more harmonious design system

## Limited Exceptions

- Media queries may use px units (`@media (min-width: 768px)`)
- 1px borders when a single-pixel line is required
- Box shadows where precise control is needed

## Examples

```scss
// ❌ AVOID
.element {
  margin: 16px;
  padding: 8px 12px;
  font-size: 14px;
}

// ✅ PREFERRED
.element {
  margin: 1rem;
  padding: 0.5rem 0.75rem;
  font-size: 0.875rem;
}
```
```

# General Code Guidelines

## Category Determination Pattern
When determining categories based on keywords in filenames or text:

1. Define a constant mapping object at module level that maps categories to their identifying keywords
2. Use TypeScript's Record type to ensure type safety
3. Convert input to lowercase once at the start
4. Use Array methods like `find` and `some` for clean keyword matching
5. Provide a default/fallback category
6. Include JSDoc with clear parameter and return descriptions

Example:
```typescript
const CATEGORY_KEYWORDS: Record<Category, string[]> = {
  [Category.TYPE_A]: ['keyword1', 'keyword2'],
  [Category.TYPE_B]: ['keyword3', 'keyword4'],
  [Category.DEFAULT]: []
};

const determineCategory = (input: string): Category => {
  const lowerInput = input.toLowerCase();
  const matchedCategory = Object.entries(CATEGORY_KEYWORDS)
    .find(([_, keywords]) => keywords.some(k => lowerInput.includes(k)));
  return matchedCategory ? (matchedCategory[0] as Category) : Category.DEFAULT;
};
``` 

# Typescript rules

- Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.

This rule provides clear guidelines on what units to use, how to convert between units, and why it's important for your project. You can add this to your general rules to ensure consistency across the codebase.

